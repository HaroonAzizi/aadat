{"version":3,"file":"static/js/210.7e0f8791.chunk.js","mappings":"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","sources":["components/habits/HabitGraph/HabitGraph.tsx","components/habits/HabitCheckIn/HabitCheckIn.tsx","pages/Dashboard/components/HabitOverview.tsx","pages/Dashboard/components/TaskOverview.tsx","pages/Dashboard/index.tsx"],"sourcesContent":["// src/components/habits/HabitGraph/HabitGraph.tsx\n\nimport React, { useEffect, useState } from \"react\";\nimport { supabase } from \"../../../services/supabase/supabaseClient\";\n\ninterface HabitGraphProps {\n  habitId: string;\n  userId: string;\n}\n\ninterface Entry {\n  completed_at: string;\n  count: number;\n}\n\nconst HabitGraph: React.FC<HabitGraphProps> = ({ habitId, userId }) => {\n  const [entries, setEntries] = useState<Entry[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchEntries = async () => {\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - 365); // Last 365 days\n\n      const { data, error } = await supabase\n        .from(\"habit_entries\")\n        .select(\"completed_at\")\n        .eq(\"habit_id\", habitId)\n        .eq(\"user_id\", userId)\n        .gte(\"completed_at\", startDate.toISOString())\n        .lte(\"completed_at\", endDate.toISOString());\n\n      if (error) {\n        console.error(\"Error fetching entries:\", error);\n        return;\n      }\n\n      setEntries(data || []);\n      setLoading(false);\n    };\n\n    fetchEntries();\n  }, [habitId, userId]);\n\n  const getIntensityClass = (count: number) => {\n    if (count === 0) return \"bg-gray-100\";\n    if (count === 1) return \"bg-green-200\";\n    if (count === 2) return \"bg-green-400\";\n    return \"bg-green-600\";\n  };\n\n  const getDaysSinceStart = () => {\n    const days = [];\n    const today = new Date();\n    for (let i = 365; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(today.getDate() - i);\n      const dateStr = date.toISOString().split(\"T\")[0];\n      const count = entries.filter((e) => e.completed_at === dateStr).length;\n      days.push({ date: dateStr, count });\n    }\n    return days;\n  };\n\n  if (loading) return <div>Loading graph...</div>;\n\n  const days = getDaysSinceStart();\n\n  return (\n    <div className=\"flex flex-wrap gap-1\">\n      {days.map((day, index) => (\n        <div\n          key={index}\n          className={`w-3 h-3 rounded-sm ${getIntensityClass(day.count)}`}\n          title={`${day.date}: ${day.count} check-ins`}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default HabitGraph;\n","// src/components/habits/HabitCheckIn/HabitCheckIn.tsx\n\nimport React, { useState } from \"react\";\nimport { supabase } from \"../../../services/supabase/supabaseClient\";\nimport Button from \"../../common/Button/Button\";\n\ninterface HabitCheckInProps {\n  habitId: string;\n  userId: string;\n  onCheckIn: () => void;\n}\n\nconst HabitCheckIn: React.FC<HabitCheckInProps> = ({\n  habitId,\n  userId,\n  onCheckIn,\n}) => {\n  const [loading, setLoading] = useState(false);\n\n  const handleCheckIn = async () => {\n    setLoading(true);\n    try {\n      const today = new Date().toISOString().split(\"T\")[0];\n\n      // Check if entry already exists\n      const { data: existingEntry } = await supabase\n        .from(\"habit_entries\")\n        .select(\"id\")\n        .eq(\"habit_id\", habitId)\n        .eq(\"completed_at\", today)\n        .single();\n\n      if (!existingEntry) {\n        // Create new entry\n        const { error } = await supabase.from(\"habit_entries\").insert([\n          {\n            habit_id: habitId,\n            user_id: userId,\n            completed_at: today,\n          },\n        ]);\n\n        if (error) throw error;\n\n        // Update streak\n        await updateStreak(habitId);\n      }\n\n      onCheckIn();\n    } catch (error) {\n      console.error(\"Error checking in:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateStreak = async (habitId: string) => {\n    try {\n      const { data: entries, error } = await supabase\n        .from(\"habit_entries\")\n        .select(\"completed_at\")\n        .eq(\"habit_id\", habitId)\n        .order(\"completed_at\", { ascending: false });\n\n      if (error) throw error;\n\n      let currentStreak = 0;\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      for (let i = 0; i < entries.length; i++) {\n        const entryDate = new Date(entries[i].completed_at);\n        const expectedDate = new Date(today);\n        expectedDate.setDate(today.getDate() - i);\n\n        if (entryDate.getTime() === expectedDate.getTime()) {\n          currentStreak++;\n        } else {\n          break;\n        }\n      }\n\n      // Update habit streak\n      const { error: updateError } = await supabase\n        .from(\"habits\")\n        .update({\n          current_streak: currentStreak,\n          longest_streak: supabase.raw(\"GREATEST(longest_streak, ?)\", [\n            currentStreak,\n          ]),\n        })\n        .eq(\"id\", habitId);\n\n      if (updateError) throw updateError;\n    } catch (error) {\n      console.error(\"Error updating streak:\", error);\n    }\n  };\n\n  return (\n    <Button\n      onClick={handleCheckIn}\n      isLoading={loading}\n      variant=\"primary\"\n      className=\"mt-2 text-white bg-green-600 px-2 py-1 rounded hover:bg-green-700\"\n    >\n      Check In Today\n    </Button>\n  );\n};\n\nexport default HabitCheckIn;\n","// src/pages/Dashboard/components/HabitOverview.tsx\n\nimport React, { useState } from \"react\";\nimport { useHabits } from \"../../../hooks/useHabits\";\nimport Button from \"../../../components/common/Button/Button\";\nimport { supabase } from \"../../../services/supabase/supabaseClient\";\nimport { useAuth } from \"../../../contexts/AuthContext\";\nimport { Link } from \"react-router-dom\";\nimport HabitGraph from \"../../../components/habits/HabitGraph/HabitGraph\";\nimport HabitCheckIn from \"../../../components/habits/HabitCheckIn/HabitCheckIn\";\n\ninterface HabitOverviewProps {\n  showForm: boolean;\n  setShowForm: (show: boolean) => void;\n}\n\nconst HabitOverview: React.FC<HabitOverviewProps> = ({\n  showForm,\n  setShowForm,\n}) => {\n  const [newHabitName, setNewHabitName] = useState(\"\");\n  const { habits, loading, error, refreshHabits } = useHabits();\n  const { user } = useAuth();\n\n  const handleAddHabit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) return;\n\n    try {\n      await supabase\n        .from(\"habits\")\n        .insert([{ name: newHabitName, user_id: user.id }]);\n\n      refreshHabits();\n      setNewHabitName(\"\");\n      setShowForm(false);\n    } catch (error) {\n      console.error(\"Error adding habit:\", error);\n    }\n  };\n\n  if (loading) return <div>Loading habits...</div>;\n  if (error)\n    return <div className=\"text-red-600\">Error loading habits: {error}</div>;\n  if (!user) return null;\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      {showForm && (\n        <div className=\"bg-white p-6 rounded-lg shadow mb-6\">\n          <form onSubmit={handleAddHabit} className=\"space-y-4\">\n            <div>\n              <label\n                htmlFor=\"habitName\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Habit Name\n              </label>\n              <input\n                type=\"text\"\n                id=\"habitName\"\n                value={newHabitName}\n                onChange={(e) => setNewHabitName(e.target.value)}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-lg focus:border-blue-500 focus:ring-blue-500\"\n                required\n              />\n            </div>\n            <div className=\"flex justify-center\">\n              <Button\n                className=\"m-4 px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded\"\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => setShowForm(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                className=\"m-4 px-4 py-2 text-white bg-green-600 rounded hover:bg-green-700\"\n                type=\"submit\"\n              >\n                Add Habit\n              </Button>\n            </div>\n          </form>\n        </div>\n      )}\n      {habits && habits.length > 0 ? (\n        <div className=\"space-y-6\">\n          {habits.map((habit) => (\n            <div key={habit.id} className=\"border-b pb-6\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-medium\">{habit.name}</h3>\n                <div className=\"text-sm text-gray-500\">\n                  <span className=\"mr-4\">\n                    Current streak: {habit.current_streak} days\n                  </span>\n                  <span>Best streak: {habit.longest_streak} days</span>\n                </div>\n              </div>\n              <HabitGraph habitId={habit.id} userId={user.id} />\n              <HabitCheckIn\n                habitId={habit.id}\n                userId={user.id}\n                onCheckIn={refreshHabits}\n              />\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-6\">\n          <p className=\"text-gray-500 mb-4\">No habits tracked yet</p>\n          <Link to=\"/habits\">\n            <Button>Start Tracking a Habit</Button>\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HabitOverview;\n","// src/pages/Dashboard/components/TaskOverview.tsx\n\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useTasks } from \"../../../hooks/useTasks\";\nimport Button from \"../../../components/common/Button/Button\";\nimport TaskList from \"../../../components/tasks/TaskList/TaskList\";\nimport TaskForm from \"../../../components/tasks/TaskForm/TaskForm\";\n\ninterface TaskOverviewProps {\n  showForm: boolean;\n  setShowForm: (show: boolean) => void;\n}\n\nconst TaskOverview: React.FC<TaskOverviewProps> = ({\n  showForm,\n  setShowForm,\n}) => {\n  const { tasks, loading, error, addTask, updateTask, deleteTask } = useTasks();\n\n  if (loading) return <div>Loading tasks...</div>;\n  if (error)\n    return <div className=\"text-red-600\">Error loading tasks: {error}</div>;\n\n  const todaysTasks = tasks.filter((task) => {\n    if (!task.due_date) return false;\n    const today = new Date().toISOString().split(\"T\")[0];\n    return task.due_date === today;\n  });\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      {showForm && (\n        <div className=\"bg-white p-6 rounded-lg shadow mb-6\">\n          <TaskForm\n            onSubmit={async (task) => {\n              await addTask({ ...task, completed: false });\n              setShowForm(false);\n            }}\n            onCancel={() => setShowForm(false)}\n          />\n        </div>\n      )}\n      {todaysTasks.length > 0 ? (\n        <TaskList\n          tasks={todaysTasks}\n          onToggleComplete={(taskId, completed) =>\n            updateTask(taskId, { completed })\n          }\n          onDeleteTask={deleteTask}\n          onEditTask={() => {}} // We'll implement this in the full tasks page\n        />\n      ) : (\n        <div className=\"text-center py-6\">\n          <p className=\"text-gray-500 mb-4\">No tasks due today</p>\n          <Link to=\"/tasks\">\n            <Button>Add a Task</Button>\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskOverview;\n","// src/pages/Dashboard/index.tsx\n\nimport React, { useState } from \"react\";\nimport Layout from \"../../components/common/Layout/Layout\";\nimport HabitOverview from \"./components/HabitOverview\";\nimport TaskOverview from \"./components/TaskOverview\";\nimport Button from \"../../components/common/Button/Button\";\nimport Footer from \"../../components/common/Footer/Footer\";\n\nconst Dashboard = () => {\n  const [showHabitForm, setShowHabitForm] = useState(false);\n  const [showTaskForm, setShowTaskForm] = useState(false);\n\n  return (\n    <Layout>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Your Habits</h2>\n            <Button\n              className=\"text-white bg-green-600 px-2 py-1 rounded hover:bg-green-700\"\n              onClick={() => setShowHabitForm(true)}\n            >\n              Add Habit\n            </Button>\n          </div>\n          <HabitOverview\n            showForm={showHabitForm}\n            setShowForm={setShowHabitForm}\n          />\n        </div>\n        <div>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Today's Tasks</h2>\n            <Button\n              className=\"text-white bg-green-600 px-2 py-1 rounded hover:bg-green-700\"\n              onClick={() => setShowTaskForm(true)}\n            >\n              Add Task\n            </Button>\n          </div>\n          <TaskOverview showForm={showTaskForm} setShowForm={setShowTaskForm} />\n        </div>\n      </div>\n      <Footer />\n    </Layout>\n  );\n};\n\nexport default Dashboard;\n"],"names":["_ref","habitId","userId","entries","setEntries","useState","loading","setLoading","useEffect","async","endDate","Date","startDate","setDate","getDate","data","error","supabase","from","select","eq","gte","toISOString","lte","console","fetchEntries","_jsx","children","days","getDaysSinceStart","today","i","date","dateStr","split","count","filter","e","completed_at","length","push","className","map","day","index","concat","title","onCheckIn","updateStreak","order","ascending","currentStreak","setHours","entryDate","expectedDate","getTime","updateError","update","current_streak","longest_streak","raw","Button","onClick","existingEntry","single","insert","habit_id","user_id","isLoading","variant","showForm","setShowForm","newHabitName","setNewHabitName","habits","refreshHabits","useHabits","user","useAuth","_jsxs","onSubmit","preventDefault","name","id","htmlFor","type","value","onChange","target","required","habit","HabitGraph","HabitCheckIn","Link","to","tasks","addTask","updateTask","deleteTask","useTasks","todaysTasks","task","due_date","TaskForm","_objectSpread","completed","onCancel","TaskList","onToggleComplete","taskId","onDeleteTask","onEditTask","Dashboard","showHabitForm","setShowHabitForm","showTaskForm","setShowTaskForm","Layout","HabitOverview","TaskOverview","Footer"],"sourceRoot":""}